import { TContact } from "./types/contact";

export type TAppState = {
    contacts: TContact[]
};



export type TAction = {
    type: string,
    payload?: any
}

export const initialState: TAppState = {
    contacts: []
};

export enum ActionType {
    CreateContact,
    EditContact,
    DeleteContact,
    Search
}

export interface CreateContact {
    type: ActionType.CreateContact;
    payload: TContact;
}

export interface EditContact {
    type: ActionType.EditContact;
    payload: TContact;
}

export interface DeleteContact {
    type: ActionType.DeleteContact;
    payload: string;
}
export interface Search {
    type: ActionType.Search;
    payload: string;
}

export type ContactActions = CreateContact | EditContact | DeleteContact | Search;


export const reducer = (state: TAppState, action: ContactActions): TAppState => {
    switch (action.type) {
        case ActionType.CreateContact:
            return {
                contacts: [
                    ...state.contacts,
                    action.payload
                ]
            }
        case ActionType.EditContact: {
            const contacts = state.contacts.filter(c => c.id != action.payload.id)
            return {
                contacts: [
                    ...contacts, action.payload
                ]
            }
        }

        case ActionType.DeleteContact: {

            const contacts = state.contacts.filter(c => c.id != action.payload)
            return {
                contacts
            }

        }
        case ActionType.Search: {
            if (action.payload) {
                const result = state.contacts.filter(c => c.name.toLowerCase().includes(action.payload.toLowerCase()));
                return {
                    contacts: result
                }
            }
            else return {
                contacts: initialState.contacts
            }
        }

        default:
            return state
    }
}

export const createContact = (contact: TContact): CreateContact => ({
    type: ActionType.CreateContact,
    payload: contact,
});

export const editContact = (contact: TContact): EditContact => ({
    type: ActionType.EditContact,
    payload: contact,
});

export const deleteContact = (id: string): DeleteContact => ({
    type: ActionType.DeleteContact,
    payload: id
});

export const searchContact = (searchString: string): Search => ({
    type: ActionType.Search,
    payload: searchString
});